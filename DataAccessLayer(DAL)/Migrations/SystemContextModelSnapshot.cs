// <auto-generated />
using System;
using DataAccessLayer_DAL_;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer_DAL_.Migrations
{
    [DbContext(typeof(SystemContext))]
    partial class SystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Compuny_Post_ModelSkill_Model", b =>
                {
                    b.Property<int>("Compuny_Post_SkillsId")
                        .HasColumnType("int");

                    b.Property<int>("Skills_NeededId")
                        .HasColumnType("int");

                    b.HasKey("Compuny_Post_SkillsId", "Skills_NeededId");

                    b.HasIndex("Skills_NeededId");

                    b.ToTable("Compuny_Post_ModelSkill_Model");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Application_Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompunyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CompunyId");

                    b.ToTable("CompuniesApplications");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Apply_Model", b =>
                {
                    b.Property<int>("Employee_ID")
                        .HasColumnType("int");

                    b.Property<int>("Compuny_Post_ID")
                        .HasColumnType("int");

                    b.HasKey("Employee_ID", "Compuny_Post_ID");

                    b.HasIndex("Compuny_Post_ID");

                    b.ToTable("Employees_Applies");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Compuny_Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompunyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Insdustry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Compunies");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Compuny_Post_Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Career_Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Compuny_ID")
                        .HasColumnType("int");

                    b.Property<string>("Experience_Years_Need")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Jop_Application_ID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Compuny_ID");

                    b.HasIndex("Jop_Application_ID");

                    b.ToTable("CompuniesPosts");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Employee_Answer_Model", b =>
                {
                    b.Property<int>("Employee_ID")
                        .HasColumnType("int");

                    b.Property<int>("Question_ID")
                        .HasColumnType("int");

                    b.Property<string>("Answer_Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Employee_ID", "Question_ID");

                    b.HasIndex("Question_ID");

                    b.ToTable("Employee_Answer_Model");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Employee_Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CV")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Employee_Post_Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Employee_ID")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Employee_ID");

                    b.ToTable("EmployeesPosts");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Jop_Response", b =>
                {
                    b.Property<int>("Employee_ID")
                        .HasColumnType("int");

                    b.Property<int>("Compuny_ID")
                        .HasColumnType("int");

                    b.Property<string>("Response_Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Employee_ID", "Compuny_ID");

                    b.HasIndex("Compuny_ID");

                    b.ToTable("Jop_Responses");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Models.Jop_Categories_Model", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Compuny_Post_ModelId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Compuny_Post_ModelId");

                    b.ToTable("Jop_Categories");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Offer_Model", b =>
                {
                    b.Property<int>("Compuny_ID")
                        .HasColumnType("int");

                    b.Property<int>("Employee_Post_ID")
                        .HasColumnType("int");

                    b.HasKey("Compuny_ID", "Employee_Post_ID");

                    b.HasIndex("Employee_Post_ID");

                    b.ToTable("Compunies_Offers");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Question_Application_Model", b =>
                {
                    b.Property<int>("Application_ID")
                        .HasColumnType("int");

                    b.Property<int>("Question_ID")
                        .HasColumnType("int");

                    b.HasKey("Application_ID", "Question_ID");

                    b.HasIndex("Question_ID");

                    b.ToTable("Application_Qustions");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Question_Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Question_Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Skill_Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Skill")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Jop_Skills");
                });

            modelBuilder.Entity("Employee_ModelSkill_Model", b =>
                {
                    b.Property<int>("Employee_skillsId")
                        .HasColumnType("int");

                    b.Property<int>("SkillsId")
                        .HasColumnType("int");

                    b.HasKey("Employee_skillsId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("Employee_ModelSkill_Model");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Compuny_Post_ModelSkill_Model", b =>
                {
                    b.HasOne("DataAccessLayer_DAL_.Compuny_Post_Model", null)
                        .WithMany()
                        .HasForeignKey("Compuny_Post_SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer_DAL_.Skill_Model", null)
                        .WithMany()
                        .HasForeignKey("Skills_NeededId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Application_Model", b =>
                {
                    b.HasOne("DataAccessLayer_DAL_.Compuny_Model", "Compuny")
                        .WithMany()
                        .HasForeignKey("CompunyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compuny");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Apply_Model", b =>
                {
                    b.HasOne("DataAccessLayer_DAL_.Compuny_Post_Model", "Compuny_Post")
                        .WithMany("Applies")
                        .HasForeignKey("Compuny_Post_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer_DAL_.Employee_Model", "Employee")
                        .WithMany("Applies")
                        .HasForeignKey("Employee_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compuny_Post");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Compuny_Post_Model", b =>
                {
                    b.HasOne("DataAccessLayer_DAL_.Compuny_Model", "Compuny")
                        .WithMany("Posts")
                        .HasForeignKey("Compuny_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer_DAL_.Application_Model", "Compuny_Jop_Application")
                        .WithMany()
                        .HasForeignKey("Jop_Application_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compuny");

                    b.Navigation("Compuny_Jop_Application");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Employee_Answer_Model", b =>
                {
                    b.HasOne("DataAccessLayer_DAL_.Employee_Model", "Employee")
                        .WithMany()
                        .HasForeignKey("Employee_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer_DAL_.Question_Model", "Question")
                        .WithMany()
                        .HasForeignKey("Question_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Employee_Post_Model", b =>
                {
                    b.HasOne("DataAccessLayer_DAL_.Employee_Model", "Employee")
                        .WithMany("Posts")
                        .HasForeignKey("Employee_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Jop_Response", b =>
                {
                    b.HasOne("DataAccessLayer_DAL_.Compuny_Model", "Compuny")
                        .WithMany()
                        .HasForeignKey("Compuny_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer_DAL_.Employee_Model", "Employee")
                        .WithMany()
                        .HasForeignKey("Employee_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compuny");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Models.Jop_Categories_Model", b =>
                {
                    b.HasOne("DataAccessLayer_DAL_.Compuny_Post_Model", null)
                        .WithMany("Jop_Categories")
                        .HasForeignKey("Compuny_Post_ModelId");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Offer_Model", b =>
                {
                    b.HasOne("DataAccessLayer_DAL_.Compuny_Model", "Compuny")
                        .WithMany("Offers")
                        .HasForeignKey("Compuny_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer_DAL_.Employee_Post_Model", "Employee_Post")
                        .WithMany("Offers")
                        .HasForeignKey("Employee_Post_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compuny");

                    b.Navigation("Employee_Post");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Question_Application_Model", b =>
                {
                    b.HasOne("DataAccessLayer_DAL_.Application_Model", "Application")
                        .WithMany("Questions")
                        .HasForeignKey("Application_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer_DAL_.Question_Model", "Question")
                        .WithMany("QuetionApplication")
                        .HasForeignKey("Question_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Employee_ModelSkill_Model", b =>
                {
                    b.HasOne("DataAccessLayer_DAL_.Employee_Model", null)
                        .WithMany()
                        .HasForeignKey("Employee_skillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer_DAL_.Skill_Model", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Application_Model", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Compuny_Model", b =>
                {
                    b.Navigation("Offers");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Compuny_Post_Model", b =>
                {
                    b.Navigation("Applies");

                    b.Navigation("Jop_Categories");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Employee_Model", b =>
                {
                    b.Navigation("Applies");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Employee_Post_Model", b =>
                {
                    b.Navigation("Offers");
                });

            modelBuilder.Entity("DataAccessLayer_DAL_.Question_Model", b =>
                {
                    b.Navigation("QuetionApplication");
                });
#pragma warning restore 612, 618
        }
    }
}
